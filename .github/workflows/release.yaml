name: Release Charts 

on:
  workflow_dispatch:
     inputs:
      release_version:
        description: 'Specify the release version number'
        required: true
      
jobs:
  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Set Chart and App Versions
        run: |
          sed -i "s/^version: .*/version: ${{ github.event.inputs.release_version }}/" charts/podiumd/Chart.yaml
          sed -i "s/^appVersion: .*/appVersion: ${{ github.event.inputs.release_version }}/" charts/podiumd/Chart.yaml

      - name: Add dependency chart repos
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add maykinmedia https://maykinmedia.github.io/charts
          helm repo add opentelemetry https://open-telemetry.github.io/opentelemetry-helm-charts
          helm repo add wiremind https://wiremind.github.io/wiremind-helm-charts
          helm repo add dimpact https://Dimpact-Samenwerking.github.io/helm-charts
          helm repo add elastic https://helm.elastic.co
          helm repo add kiss-frontend https://raw.githubusercontent.com/Klantinteractie-Servicesysteem/KISS-frontend/main/helm
          helm repo add kiss-adapter https://raw.githubusercontent.com/ICATT-Menselijk-Digitaal/podiumd-adapter/main/helm
          helm repo add kiss-elastic https://raw.githubusercontent.com/Klantinteractie-Servicesysteem/.github/main/docs/scripts/elastic


      - name: Fetch Grafana Promtail Changelog
        id: fetch_promtail_changelog
        run: |
          # Define the URL to the changelog in the Grafana Promtail repository
          PROMTAIL_CHANGELOG_URL="https://raw.githubusercontent.com/grafana/helm-charts/main/charts/promtail/CHANGELOG.md"

          # Fetch the changelog file
          PROMTAIL_CHANGELOG=$(curl -s $PROMTAIL_CHANGELOG_URL)

          # Extract the most recent release notes from the changelog (customize as needed)
          # This example assumes the changelog follows a common markdown format
          LATEST_PROMTAIL_CHANGELOG=$(echo "$PROMTAIL_CHANGELOG" | awk '/## [0-9]+\.[0-9]+\.[0-9]+/ {print; exit}')

          # Output the fetched changelog
          echo "::set-output name=promtail_changelog::$LATEST_PROMTAIL_CHANGELOG"
      - name: Fetch PRs with Changelogs
        id: fetch_prs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch merged PRs from the current branch with changelog updates
          PRS=$(gh pr list --state merged --search "label:dependencies label:changelog-update base:main" --json title,body,url)

          # Initialize release notes
          RELEASE_NOTES="### Dependency Updates with Changelogs\n\n"

          # Loop through each PR and add its changelog to release notes
          for pr in $(echo "$PRS" | jq -c '.[]'); do
            TITLE=$(echo "$pr" | jq -r '.title')
            BODY=$(echo "$pr" | jq -r '.body')
            URL=$(echo "$pr" | jq -r '.html_url')
            RELEASE_NOTES+="**$TITLE**\n$BODY\n[View PR]($URL)\n\n"
          done

          # Output the release notes
          echo "::set-output name=notes::$RELEASE_NOTES"

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          # Use the aggregated changelog notes from previous step
          body: ${{ steps.fetch_prs.outputs.notes }}
