name: Create Release from Specific Tag

on:
  workflow_dispatch:
    inputs:
      grafana_version:
        description: 'Tag version for grafana/grafana (e.g., v10.4.12)'
        required: true
      loki_version:
        description: 'Tag version for loki/loki (e.g., v2.3.4)'
        required: true

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Release Content for Grafana
        id: get_grafana_release
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          TARGET_REPO="grafana/grafana"
          TAG_VERSION="${{ github.event.inputs.grafana_version }}"

          # Fetch the release content for the specified tag
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$TARGET_REPO/releases/tags/$TAG_VERSION")

          # Check if the tag exists by verifying the presence of an ID
          RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id // empty')
          if [ -z "$RELEASE_ID" ]; then
            echo "Error: Tag $TAG_VERSION does not exist in $TARGET_REPO."
            exit 1
          fi

          # Extract the release content (body) from the response
          RELEASE_BODY=$(echo "$RESPONSE" | jq -r '.body // "No release notes available for this tag."')

          # Set release content in environment variable for later use
          echo "GRAFANA_RELEASE_BODY=$RELEASE_BODY" >> $GITHUB_ENV

      - name: Get Release Content for Loki
        id: get_loki_release
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          TARGET_REPO="loki/loki"
          TAG_VERSION="${{ github.event.inputs.loki_version }}"

          # Fetch the release content for the specified tag
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$TARGET_REPO/releases/tags/$TAG_VERSION")

          # Check if the tag exists by verifying the presence of an ID
          RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id // empty')
          if [ -z "$RELEASE_ID" ]; then
            echo "Error: Tag $TAG_VERSION does not exist in $TARGET_REPO."
            exit 1
          fi

          # Extract the release content (body) from the response
          RELEASE_BODY=$(echo "$RESPONSE" | jq -r '.body // "No release notes available for this tag."')

          # Set release content in environment variable for later use
          echo "LOKI_RELEASE_BODY=$RELEASE_BODY" >> $GITHUB_ENV

      - name: Create or Update GitHub Release for Grafana
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.event.inputs.grafana_version }}
          release_name: "Release ${{ github.event.inputs.grafana_version }} for Grafana"
          body: |
            ## Release Notes for ${{ github.event.inputs.grafana_version }}
            ${{ env.GRAFANA_RELEASE_BODY }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Create or Update GitHub Release for Loki
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.event.inputs.loki_version }}
          release_name: "Release ${{ github.event.inputs.loki_version }} for Loki"
          body: |
            ## Release Notes for ${{ github.event.inputs.loki_version }}
            ${{ env.LOKI_RELEASE_BODY }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
