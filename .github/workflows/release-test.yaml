name: Multi-Repository Release Workflow

on:
  workflow_dispatch:
    inputs:
      repositories:
        description: 'Repositories and tags to release (format: repo1:tag1,repo2:tag2)'
        required: true
        default: 'grafana/grafana:v10.4.12,another-org/another-repo:v2.3.4'

jobs:
  create_releases:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Parse repositories input into JSON array
        id: parse_repos
        run: |
          # Convert the comma-separated input string into a JSON array format
          REPOSITORIES="${{ github.event.inputs.repositories }}"
          JSON_ARRAY=$(echo "$REPOSITORIES" | awk -v OFS=',' '{gsub(/,/, "\",\""); print "[\"" $0 "\"]"}')
          echo "json_repos=$JSON_ARRAY" >> $GITHUB_ENV

      - name: Define matrix dynamically
        uses: actions/github-script@v6
        id: define_matrix
        with:
          script: |
            // Read the JSON array from the environment variable
            const jsonRepos = process.env.json_repos;
            // Parse JSON string into an array for the matrix
            const matrix = JSON.parse(jsonRepos);
            // Set matrix as an output for GitHub Actions
            return { matrix };

      - name: Set matrix repository and tag variables
        if: ${{ fromJson(steps.define_matrix.outputs.matrix).length > 0 }}
        strategy:
          matrix:
            repo_tag: ${{ fromJson(steps.define_matrix.outputs.matrix) }}

      - name: Parse repository and tag
        id: parse_repo_tag
        run: |
          # Parse the repository and tag from the matrix string
          REPO_TAG="${{ matrix.repo_tag }}"
          REPO=$(echo "$REPO_TAG" | cut -d':' -f1)
          TAG=$(echo "$REPO_TAG" | cut -d':' -f2)
          
          # Export repository and tag as environment variables
          echo "REPOSITORY=$REPO" >> $GITHUB_ENV
          echo "TAG_VERSION=$TAG" >> $GITHUB_ENV

      - name: Get Release Content for Specified Tag
        id: get_release_content
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          # Fetch the release content for the specified repository and tag
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPOSITORY/releases/tags/$TAG_VERSION")

          # Check if the tag exists by verifying the presence of an ID
          RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id // empty')
          if [ -z "$RELEASE_ID" ]; then
            echo "Error: Tag $TAG_VERSION does not exist in $REPOSITORY."
            exit 1
          fi

          # Extract the release content (body) from the response
          RELEASE_BODY=$(echo "$RESPONSE" | jq -r '.body // "No release notes available for this tag."')
          
          # Save the release content to a file
          echo "$RELEASE_BODY" > release_body.txt

      - name: Create or Update GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.TAG_VERSION }}
          release_name: "Release ${{ env.TAG_VERSION }}"
          body_path: ./release_body.txt
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
