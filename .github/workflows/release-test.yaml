name: Create Release from Specific Tag

on:
  workflow_dispatch:
    inputs:
      repos_versions:
        description: 'List of repositories and versions (e.g., "grafana/grafana:v10.4.12,grafana/loki:v3.2.1")'
        required: true

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        repo_version: ${{ fromJson(inputs.repos_versions) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Release Content for Specified Tag
        id: get_release_content
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          # Extract repository and version from the matrix variable
          REPO_VERSION=${{ matrix.repo_version }}
          TARGET_REPO=$(echo $REPO_VERSION | cut -d ':' -f 1)
          TAG_VERSION=$(echo $REPO_VERSION | cut -d ':' -f 2)

          # Fetch the release content for the specified tag
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$TARGET_REPO/releases/tags/$TAG_VERSION")

          # Check if the tag exists by verifying the presence of an ID
          RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id // empty')
          if [ -z "$RELEASE_ID" ]; then
            echo "Error: Tag $TAG_VERSION does not exist in $TARGET_REPO."
            exit 1
          fi

          # Extract the release content (body) from the response
          RELEASE_BODY=$(echo "$RESPONSE" | jq -r '.body // "No release notes available for this tag."')
          
          # Save the release content to a file instead of an environment variable
          echo "$RELEASE_BODY" > release_body.txt

      - name: Create or Update GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ matrix.repo_version }}  # Using the version from the matrix
          release_name: "Release ${{ matrix.repo_version }}"
          body_path: ./release_body.txt
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
