name: Release Charts kopie

on:
  workflow_dispatch:
     inputs:
      release_version:
        description: 'Specify the release version number'
        required: true
jobs:
  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get existing release ID
        id: get_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if the release already exists for the given version
          RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.event.inputs.release_version }}" \
            | jq -r '.id // empty')

          echo "Release ID: $RELEASE_ID"
          echo "release_id=$RELEASE_ID" >> $GITHUB_ENV

      - name: Get content of specific release (e.g., from grafana/grafana)
        id: get_release_content
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch content of a specific release from a different repo (e.g., grafana/grafana)
          SPECIFIC_RELEASE_URL="https://api.github.com/repos/grafana/grafana/releases/tags/v${{ github.event.inputs.release_version }}"
          
          # Get the release body content (release notes)
          RELEASE_BODY=$(curl -s -H "Authorization: token $GITHUB_TOKEN" "$SPECIFIC_RELEASE_URL" | jq -r '.body // empty')

          # Output the release notes content for debugging purposes
          echo "Release body content: $RELEASE_BODY"

          # Set the release body content as an environment variable to use later
          echo "release_body_content=$RELEASE_BODY" >> $GITHUB_ENV

      - name: Update existing GitHub Release
        if: env.release_id != ''
        run: |
          echo "Updating the existing release with ID ${{ env.release_id }}"
          
          curl -s -X PATCH \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$(jq -n --arg body "$RELEASE_BODY" \
              '{body: $body}')" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ env.release_id }}"

      - name: Create new GitHub Release
        if: env.release_id == ''
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_version }}
          release_name: "Release ${{ github.event.inputs.release_version }}"
          body: |
            ## Commits in this Release
            ${{ env.commits }}

            ## External Changelogs
            ${{ env.changelogs }}

            ## Release Notes from Grafana
            ${{ env.release_body_content }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
