name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Version to release'
        required: true
      target_repo:
        description: 'Repository to get commits from (OWNER/REPO format)'
        required: true
      ref:
        description: 'Branch or tag to get commits from'
        default: 'main'

jobs:
  release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Latest Commits from Specified Repository
        id: get_commits
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          # Define the target repository and ref (branch/tag)
          TARGET_REPO="${{ github.event.inputs.target_repo }}"
          REF="${{ github.event.inputs.ref || 'main' }}"  # Default to 'main' if no ref is provided

          # Fetch the latest 5 commits from the specified repository and ref
          LATEST_COMMITS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$TARGET_REPO/commits?sha=$REF&per_page=5" | \
            jq -r '.[] | "- " + .commit.message + " (" + .sha[0:7] + ")"')

          # Check if commits were found; if not, exit with an error
          if [ -z "$LATEST_COMMITS" ]; then
            echo "No commits found for $TARGET_REPO at $REF."
            exit 1
          fi

          # Output the formatted commit messages to an environment variable
          echo "LATEST_COMMITS=$LATEST_COMMITS" >> $GITHUB_ENV

      - name: Create or Update GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_version }}
          release_name: "Release ${{ github.event.inputs.release_version }}"
          body: |
            ## Latest Commits from ${{ github.event.inputs.target_repo }} (Branch/Tag: ${{ github.event.inputs.ref }})
            ${{ env.LATEST_COMMITS }}

            ## Additional Changelogs
            ${{ env.changelogs }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
