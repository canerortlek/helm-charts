name: Create Release from Specific Version

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Tag version to release (e.g., v10.4.12)'
        required: true

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Release Content for Specified Version
        id: get_release_content
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          TARGET_REPO="maykinmedia/open-inwoner"
          RELEASE_VERSION="${{ github.event.inputs.version }}"

          # Fetch the release content for the specified version
          RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$TARGET_REPO/releases")

          # Find the release with the matching version name
          RELEASE=$(echo "$RESPONSE" | jq -r ".[] | select(.name == \"$RELEASE_VERSION\")")

          # Check if the release was found
          if [ -z "$RELEASE" ]; then
            echo "Error: Release version $RELEASE_VERSION does not exist in $TARGET_REPO."
            exit 1
          fi

          # Extract the release content (body) from the response
          RELEASE_BODY=$(echo "$RELEASE" | jq -r '.body // "No release notes available for this version."')

          # Escape newlines and special characters for GitHub Actions environment variable
          ESCAPED_BODY=$(echo "$RELEASE_BODY" | jq -Rs .)

          # Set the escaped release body in an environment variable
          echo "RELEASE_BODY=$ESCAPED_BODY" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: "Release ${{ github.event.inputs.version }}"
          body: ${{ env.RELEASE_BODY }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
